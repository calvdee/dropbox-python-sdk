#! /usr/bin/env python

import os
import sys
import imp

try:
    import json
except ImportError:
    import simplejson as json

def main(argv):
    args = argv[1:]

    if len(args) < 2:
        sys.stderr.write("Usage: ./run_patched <app-config.json> <program.py> [args...]\n")
        sys.exit(1)

    config_file = args[0]
    program_file = args[1]
    program_args = args[2:]

    if not program_file.endswith('.py'):
        sys.stderr.write("Program file name must end with \".py\".  You specified \"%s\"." % program_file)
        sys.exit(1)
    program_module_name = program_file[:-3]  # Not accurate if the file name has slashes...

    # See if config_file exists, then load it as JSON.
    if not os.path.exists(config_file):
        sys.stderr.write("Couldn't find config file (\"%s\").\n" % config_file)
        sys.exit(1)
    f = open(config_file)
    config = json.load(f)
    f.close()

    # Load the key/secret/access_type/server fields.
    for field in ('key', 'secret', 'access_type'):
        if not config.has_key(field) or len(config[field]) == 0:
            sys.stderr.write("\"%s\": config \"%s\": missing or empty \"%s\" field.\n" % (apps_json_path, config_name, field))
            sys.exit(1)
    app_key = config['key']
    app_secret = config['secret']
    app_access_type = config['access_type']
    server = config['server'] if config.has_key('server') else None

    if app_access_type not in ('dropbox', 'app_folder'):
        sys.stderr.write("Access type should be either \"dropbox\" or \"app_folder\".  You specified \"%s\".\n" % app_access_type)
        sys.exit(1)

    sys.path.append("..")
    from dropbox import session, rest

    # Patch hostnames in dropbox.session
    if server is not None and server != "dropbox.com":
        session.DropboxSession.API_HOST = "api." + server
        session.DropboxSession.API_CONTENT_HOST = "api-content." + server
        session.DropboxSession.WEB_HOST = "meta." + server
        # Don't do certificate validation for non-prod servers.
        import httplib
        import socket
        import ssl
        class BrokenHTTPSConnection(httplib.HTTPConnection):
            def __init__(self, host, port):
                httplib.HTTPConnection.__init__(self, host, port)
            def connect(self):
                sock = rest.create_connection((self.host, self.port))
                self.sock = ssl.wrap_socket(sock, cert_reqs=ssl.CERT_NONE)
        rest.ProperHTTPSConnection = BrokenHTTPSConnection

    # Patch app key/secret in the main module
    example = imp.load_source(program_module_name, os.path.join(os.path.dirname(__file__), program_file))
    example.APP_KEY = app_key
    example.APP_SECRET = app_secret
    example.ACCESS_TYPE = app_access_type

    # Fixup 'sys.argv' so the target program gets what it expects.
    relay_argv = [program_file]
    relay_argv.extend(program_args)
    sys.argv = relay_argv

    return example.main()

if __name__ == "__main__":
    main(sys.argv)
